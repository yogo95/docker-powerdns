#Oct 01 01:56:25 Reading random entropy from '/dev/urandom'
#Oct 01 01:56:25 Loading '/usr/lib/pdns/pdns/libgpgsqlbackend.so'
# Autogenerated configuration file template
#################################
# 8bit-dns	Allow 8bit dns queries
#
# 8bit-dns=no

#################################
# allow-axfr-ips	Allow zonetransfers only to these subnets
#
# allow-axfr-ips=127.0.0.0/8,::1

#################################
# allow-dnsupdate-from	A global setting to allow DNS updates from these IP ranges.
#
# allow-dnsupdate-from=127.0.0.0/8,::1

#################################
# allow-notify-from	Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.
#
# allow-notify-from=0.0.0.0/0,::/0

#################################
# allow-recursion	List of subnets that are allowed to recurse
#
# allow-recursion=0.0.0.0/0

#################################
# allow-unsigned-notify	Allow unsigned notifications for TSIG secured domains
#
# allow-unsigned-notify=yes

#################################
# allow-unsigned-supermaster	Allow supermasters to create zones without TSIG signed NOTIFY
#
# allow-unsigned-supermaster=yes

#################################
# also-notify	When notifying a domain, also notify these nameservers
#
# also-notify=

#################################
# any-to-tcp	Answer ANY queries with tc=1, shunting to TCP
#
# any-to-tcp=yes

#################################
# api	Enable/disable the REST API
#
# api=no

#################################
# api-key	Static pre-shared authentication key for access to the REST API
#
# api-key=

#################################
# api-logfile	Location of the server logfile (used by the REST API)
#
# api-logfile=/var/log/pdns.log

#################################
# api-readonly	Disallow data modification through the REST API when set
#
# api-readonly=no

#################################
# cache-ttl	Seconds to store packets in the PacketCache
#
# cache-ttl=20

#################################
# carbon-interval	Number of seconds between carbon (graphite) updates
#
# carbon-interval=30

#################################
# carbon-ourname	If set, overrides our reported hostname for carbon stats
#
# carbon-ourname=

#################################
# carbon-server	If set, send metrics in carbon (graphite) format to this server
#
# carbon-server=

#################################
# chroot	If set, chroot to this directory for more security
#
# chroot=

#################################
# config-dir	Location of configuration directory (pdns.conf)
#
# config-dir=/etc/pdns

#################################
# config-name	Name of this virtual configuration - will rename the binary image
#
# config-name=

#################################
# control-console	Debugging switch - don't use
#
# control-console=no

#################################
# daemon	Operate as a daemon
#
# daemon=no

#################################
# default-ksk-algorithms	Default KSK algorithms
#
# default-ksk-algorithms=ecdsa256

#################################
# default-ksk-size	Default KSK size (0 means default)
#
# default-ksk-size=0

#################################
# default-soa-edit	Default SOA-EDIT value
#
# default-soa-edit=

#################################
# default-soa-edit-signed	Default SOA-EDIT value for signed zones
#
# default-soa-edit-signed=

#################################
# default-soa-mail	mail address to insert in the SOA record if none set in the backend
#
# default-soa-mail=

#################################
# default-soa-name	name to insert in the SOA record if none set in the backend
#
# default-soa-name=a.misconfigured.powerdns.server

#################################
# default-ttl	Seconds a result is valid if not set otherwise
#
# default-ttl=3600

#################################
# default-zsk-algorithms	Default ZSK algorithms
#
# default-zsk-algorithms=

#################################
# default-zsk-size	Default ZSK size (0 means default)
#
# default-zsk-size=0

#################################
# direct-dnskey	Fetch DNSKEY RRs from backend during DNSKEY synthesis
#
# direct-dnskey=no

#################################
# disable-axfr	Disable zonetransfers but do allow TCP queries
#
# disable-axfr=no

#################################
# disable-axfr-rectify	Disable the rectify step during an outgoing AXFR. Only required for regression testing.
#
# disable-axfr-rectify=no

#################################
# disable-syslog	Disable logging to syslog, useful when running inside a supervisor that logs stdout
#
# disable-syslog=no

#################################
# disable-tcp	Do not listen to TCP queries
#
# disable-tcp=no

#################################
# distributor-threads	Default number of Distributor (backend) threads to start
#
# distributor-threads=3

#################################
# dname-processing	If we should support DNAME records
#
# dname-processing=no

#################################
# dnssec-key-cache-ttl	Seconds to cache DNSSEC keys from the database
#
# dnssec-key-cache-ttl=30

#################################
# dnsupdate	Enable/Disable DNS update (RFC2136) support. Default is no.
#
# dnsupdate=no

#################################
# do-ipv6-additional-processing	Do AAAA additional processing
#
# do-ipv6-additional-processing=yes

#################################
# domain-metadata-cache-ttl	Seconds to cache domain metadata from the database
#
# domain-metadata-cache-ttl=60

#################################
# edns-subnet-processing	If we should act on EDNS Subnet options
#
# edns-subnet-processing=no

#################################
# entropy-source	If set, read entropy from this file
#
# entropy-source=/dev/urandom

#################################
# experimental-lua-policy-script	Lua script for the policy engine
#
# experimental-lua-policy-script=

#################################
# forward-dnsupdate	A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.
#
# forward-dnsupdate=yes

#################################
# gpgsql-activate-domain-key-query	
#
# gpgsql-activate-domain-key-query=update cryptokeys set active=true where domain_id=(select id from domains where name=$1) and  cryptokeys.id=$2

#################################
# gpgsql-add-domain-key-query	
#
# gpgsql-add-domain-key-query=insert into cryptokeys (domain_id, flags, active, content) select id, $1, $2, $3 from domains where name=$4

#################################
# gpgsql-any-id-query	Any with ID query
#
gpgsql-any-id-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE disabled=false and name=$1 and domain_id=$2

#################################
# gpgsql-any-query	Any query
#
gpgsql-any-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE disabled=false and name=$1

#################################
# gpgsql-basic-query	Basic query
#
gpgsql-basic-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE disabled=false and type=$1 and name=$2

#################################
# gpgsql-clear-domain-all-keys-query	
#
# gpgsql-clear-domain-all-keys-query=delete from cryptokeys where domain_id=(select id from domains where name=$1)

#################################
# gpgsql-clear-domain-all-metadata-query	
#
# gpgsql-clear-domain-all-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=$1)

#################################
# gpgsql-clear-domain-metadata-query	
#
# gpgsql-clear-domain-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=$1) and domainmetadata.kind=$2

#################################
# gpgsql-dbname	Pdns backend database name to connect to
#
gpgsql-dbname=pdns

#################################
# gpgsql-deactivate-domain-key-query	
#
# gpgsql-deactivate-domain-key-query=update cryptokeys set active=false where domain_id=(select id from domains where name=$1) and  cryptokeys.id=$2

#################################
# gpgsql-delete-comment-rrset-query	
#
# gpgsql-delete-comment-rrset-query=DELETE FROM comments WHERE domain_id=$1 AND name=$2 AND type=$3

#################################
# gpgsql-delete-comments-query	
#
# gpgsql-delete-comments-query=DELETE FROM comments WHERE domain_id=$1

#################################
# gpgsql-delete-domain-query	
#
# gpgsql-delete-domain-query=delete from domains where name=$1

#################################
# gpgsql-delete-empty-non-terminal-query	delete empty non-terminal from zone
#
# gpgsql-delete-empty-non-terminal-query=delete from records where domain_id=$1 and name=$2 and type is null

#################################
# gpgsql-delete-names-query	
#
# gpgsql-delete-names-query=delete from records where domain_id=$1 and name=$2

#################################
# gpgsql-delete-rrset-query	
#
# gpgsql-delete-rrset-query=delete from records where domain_id=$1 and name=$2 and type=$3

#################################
# gpgsql-delete-tsig-key-query	
#
# gpgsql-delete-tsig-key-query=delete from tsigkeys where name=$1

#################################
# gpgsql-delete-zone-query	
#
# gpgsql-delete-zone-query=delete from records where domain_id=$1

#################################
# gpgsql-dnssec	Enable DNSSEC processing
#
# gpgsql-dnssec=no

#################################
# gpgsql-get-all-domain-metadata-query	
#
gpgsql-get-all-domain-metadata-query=select kind,content from pdns.domains, pdns.domainmetadata where pdns.domainmetadata.domain_id=pdns.domains.id and name=$1

#################################
# gpgsql-get-all-domains-query	Retrieve all domains
#
gpgsql-get-all-domains-query=select domains.id, domains.name, records.content, domains.type, domains.master, domains.notified_serial, domains.last_check, domains.account from pdns.domains LEFT JOIN pdns.records ON records.domain_id=domains.id AND records.type='SOA' AND records.name=domains.name WHERE records.disabled=false OR $1

#################################
# gpgsql-get-domain-metadata-query	
#
gpgsql-get-domain-metadata-query=select content from pdns.domains, pdns.domainmetadata where domainmetadata.domain_id=domains.id and name=$1 and domainmetadata.kind=$2

#################################
# gpgsql-get-order-after-query	DNSSEC Ordering Query, after
#
gpgsql-get-order-after-query=select ordername from pdns.records where disabled=false and ordername ~>~ $1 and domain_id=$2 and ordername is not null order by 1 using ~<~ limit 1

#################################
# gpgsql-get-order-before-query	DNSSEC Ordering Query, before
#
gpgsql-get-order-before-query=select ordername, name from pdns.records where disabled=false and ordername ~<=~ $1 and domain_id=$2 and ordername is not null order by 1 using ~>~ limit 1

#################################
# gpgsql-get-order-first-query	DNSSEC Ordering Query, last
#
gpgsql-get-order-first-query=select ordername from pdns.records where disabled=false and domain_id=$1 and ordername is not null order by 1 using ~<~ limit 1

#################################
# gpgsql-get-order-last-query	DNSSEC Ordering Query, last
#
gpgsql-get-order-last-query=select ordername, name from pdns.records where disabled=false and ordername != '' and domain_id=$1 and ordername is not null order by 1 using ~>~ limit 1

#################################
# gpgsql-get-tsig-key-query	
#
gpgsql-get-tsig-key-query=select algorithm, secret from pdns.tsigkeys where name=$1

#################################
# gpgsql-get-tsig-keys-query	
#
gpgsql-get-tsig-keys-query=select name,algorithm, secret from pdns.tsigkeys

#################################
# gpgsql-host	Pdns backend host to connect to
#
gpgsql-host=postgres

#################################
# gpgsql-id-query	Basic with ID query
#
gpgsql-id-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE disabled=false and type=$1 and name=$2 and domain_id=$3

#################################
# gpgsql-info-all-master-query	
#
gpgsql-info-all-master-query=select id,name,master,last_check,notified_serial,type from pdns.domains where type='MASTER'

#################################
# gpgsql-info-all-slaves-query	
#
gpgsql-info-all-slaves-query=select id,name,master,last_check from pdns.domains where type='SLAVE'

#################################
# gpgsql-info-zone-query	
#
gpgsql-info-zone-query=select id,name,master,last_check,notified_serial,type,account from pdns.domains where name=$1

#################################
# gpgsql-insert-comment-query	
#
# gpgsql-insert-comment-query=INSERT INTO comments (domain_id, name, type, modified_at, account, comment) VALUES ($1, $2, $3, $4, $5, $6)

#################################
# gpgsql-insert-empty-non-terminal-order-query	insert empty non-terminal in zone
#
# gpgsql-insert-empty-non-terminal-order-query=insert into records (type,domain_id,disabled,name,ordername,auth,ttl,prio,change_date,content) values (null,$1,false,$2,$3,$4,null,null,null,null)

#################################
# gpgsql-insert-record-query	
#
# gpgsql-insert-record-query=insert into records (content,ttl,prio,type,domain_id,disabled,name,ordername,auth,change_date) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,null)

#################################
# gpgsql-insert-zone-query	
#
# gpgsql-insert-zone-query=insert into domains (type,name,master,account,last_check, notified_serial) values($1,$2,$3,$4,null,null)

#################################
# gpgsql-list-comments-query	
#
gpgsql-list-comments-query=SELECT domain_id,name,type,modified_at,account,comment FROM pdns.comments WHERE domain_id=$1

#################################
# gpgsql-list-domain-keys-query	
#
gpgsql-list-domain-keys-query=select cryptokeys.id, flags, case when active then 1 else 0 end as active, content from pdns.domains, pdns.cryptokeys where cryptokeys.domain_id=domains.id and name=$1

#################################
# gpgsql-list-query	AXFR query
#
gpgsql-list-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE (disabled=false OR $1) and domain_id=$2 order by name, type

#################################
# gpgsql-list-subzone-query	Subzone listing
#
gpgsql-list-subzone-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE disabled=false and (name=$1 OR name like $2) and domain_id=$3

#################################
# gpgsql-master-zone-query	Data
#
gpgsql-master-zone-query=select master from pdns.domains where name=$1 and type='SLAVE'

#################################
# gpgsql-nullify-ordername-and-update-auth-query	DNSSEC nullify ordername and update auth for a qname query
#
# gpgsql-nullify-ordername-and-update-auth-query=UPDATE pdns.records SET ordername=NULL,auth=$1 WHERE domain_id=$2 and name=$3 and disabled=false

#################################
# gpgsql-nullify-ordername-and-update-auth-type-query	DNSSEC nullify ordername and update auth for a rrset query
#
# gpgsql-nullify-ordername-and-update-auth-type-query=UDPATE pdns.records SET ordername=NULL,auth=$1 WHERE domain_id=$2 and name=$3 and type=$4 and disabled=false

#################################
# gpgsql-password	Pdns backend password to connect with
#
gpgsql-password=qwerty

#################################
# gpgsql-port	Database backend port to connect to
#
# gpgsql-port=

#################################
# gpgsql-remove-domain-key-query	
#
# gpgsql-remove-domain-key-query=delete from cryptokeys where domain_id=(select id from domains where name=$1) and cryptokeys.id=$2

#################################
# gpgsql-remove-empty-non-terminals-from-zone-query	remove all empty non-terminals from zone
#
# gpgsql-remove-empty-non-terminals-from-zone-query=delete from records where domain_id=$1 and type is null

#################################
# gpgsql-search-comments-query	
#
gpgsql-search-comments-query=SELECT domain_id,name,type,modified_at,account,comment FROM pdns.comments WHERE name LIKE $1 OR comment LIKE $2 LIMIT $3

#################################
# gpgsql-search-records-query	
#
gpgsql-search-records-query=SELECT content,ttl,prio,type,domain_id,disabled::int,name,auth::int FROM pdns.records WHERE name LIKE $1 OR content LIKE $2 LIMIT $3

#################################
# gpgsql-set-domain-metadata-query	
#
# gpgsql-set-domain-metadata-query=insert into domainmetadata (domain_id, kind, content) select id, $1, $2 from domains where name=$3

#################################
# gpgsql-set-tsig-key-query	
#
# gpgsql-set-tsig-key-query=insert into tsigkeys (name,algorithm,secret) values($1,$2,$3)

#################################
# gpgsql-supermaster-name-to-ips	
#
gpgsql-supermaster-name-to-ips=select ip,account from pdns.supermasters where nameserver=$1 and account=$2

#################################
# gpgsql-supermaster-query	
#
gpgsql-supermaster-query=select account from pdns.supermasters where ip=$1 and nameserver=$2

#################################
# gpgsql-update-account-query	
#
# gpgsql-update-account-query=UPDATE pdns.domains SET account=$1 WHERE name=$2

#################################
# gpgsql-update-kind-query	
#
# gpgsql-update-kind-query=UPDATE pdns.domains SET type=$1 WHERE name=$2

#################################
# gpgsql-update-lastcheck-query	
#
gpgsql-update-lastcheck-query=UPDATE pdns.domains SET last_check=$1 WHERE id=$2

#################################
# gpgsql-update-master-query	
#
# gpgsql-update-master-query=UPDATE pdns.domains SET master=$1 WHERE name=$2

#################################
# gpgsql-update-ordername-and-auth-query	DNSSEC update ordername and auth for a qname query
#
# gpgsql-update-ordername-and-auth-query=UPDATE pdns.records SET ordername=$1,auth=$2 WHERE domain_id=$3 and name=$4 and disabled=false

#################################
# gpgsql-update-ordername-and-auth-type-query	DNSSEC update ordername and auth for a rrset query
#
# gpgsql-update-ordername-and-auth-type-query=UPDATE pdns.records SET ordername=$1,auth=$2 WHERE domain_id=$3 and name=$4 and type=$5 and disabled=false

#################################
# gpgsql-update-serial-query	
#
gpgsql-update-serial-query=UPDATE pdns.domains SET notified_serial=$1 WHERE id=$2

#################################
# gpgsql-user	Pdns backend user to connect as
#
gpgsql-user=pdns

#################################
# gpgsql-zone-lastchange-query	
#
gpgsql-zone-lastchange-query=SELECT max(change_date) FROM pdns.records WHERE domain_id=$1

#################################
# guardian	Run within a guardian process
#
guardian=yes

#################################
# include-dir	Include *.conf files from this directory
#
# include-dir=

#################################
# launch	Which backends to launch and order to query them in
#
launch=gpgsql

#################################
# load-modules	Load this module - supply absolute or relative path
#
# load-modules=

#################################
# local-address	Local IP addresses to which we bind
#
local-address=0.0.0.0

#################################
# local-address-nonexist-fail	Fail to start if one or more of the local-address's do not exist on this server
#
# local-address-nonexist-fail=yes

#################################
# local-ipv6	Local IP address to which we bind
#
# local-ipv6=::

#################################
# local-ipv6-nonexist-fail	Fail to start if one or more of the local-ipv6 addresses do not exist on this server
#
# local-ipv6-nonexist-fail=yes

#################################
# local-port	The port on which we listen
#
local-port=53

#################################
# log-dns-details	If PDNS should log DNS non-erroneous details
#
# log-dns-details=no

#################################
# log-dns-queries	If PDNS should log all incoming DNS queries
#
# log-dns-queries=no

#################################
# logging-facility	Log under a specific facility
#
# logging-facility=

#################################
# loglevel	Amount of logging. Higher is more. Do not set below 3
#
# loglevel=4

#################################
# lua-prequery-script	Lua script with prequery handler (DO NOT USE)
#
# lua-prequery-script=

#################################
# master	Act as a master
#
master=yes

#################################
# max-cache-entries	Maximum number of cache entries
#
# max-cache-entries=1000000

#################################
# max-ent-entries	Maximum number of empty non-terminals in a zone
#
# max-ent-entries=100000

#################################
# max-nsec3-iterations	Limit the number of NSEC3 hash iterations
#
# max-nsec3-iterations=500

#################################
# max-queue-length	Maximum queuelength before considering situation lost
#
# max-queue-length=5000

#################################
# max-signature-cache-entries	Maximum number of signatures cache entries
#
# max-signature-cache-entries=

#################################
# max-tcp-connections	Maximum number of TCP connections
#
# max-tcp-connections=20

#################################
# module-dir	Default directory for modules
#
# module-dir=/usr/lib/pdns/pdns

#################################
# negquery-cache-ttl	Seconds to store negative query results in the QueryCache
#
# negquery-cache-ttl=60

#################################
# no-shuffle	Set this to prevent random shuffling of answers - for regression testing
#
# no-shuffle=off

#################################
# non-local-bind	Enable binding to non-local addresses by using FREEBIND / BINDANY socket options
#
# non-local-bind=no

#################################
# only-notify	Only send AXFR NOTIFY to these IP addresses or netmasks
#
# only-notify=0.0.0.0/0,::/0

#################################
# out-of-zone-additional-processing	Do out of zone additional processing
#
# out-of-zone-additional-processing=yes

#################################
# outgoing-axfr-expand-alias	Expand ALIAS records during outgoing AXFR
#
# outgoing-axfr-expand-alias=no

#################################
# overload-queue-length	Maximum queuelength moving to packetcache only
#
# overload-queue-length=0

#################################
# prevent-self-notification	Don't send notifications to what we think is ourself
#
# prevent-self-notification=yes

#################################
# query-cache-ttl	Seconds to store query results in the QueryCache
#
# query-cache-ttl=20

#################################
# query-local-address	Source IP address for sending queries
#
# query-local-address=0.0.0.0

#################################
# query-local-address6	Source IPv6 address for sending queries
#
# query-local-address6=::

#################################
# query-logging	Hint backends that queries should be logged
#
# query-logging=yes

#################################
# queue-limit	Maximum number of milliseconds to queue a query
#
# queue-limit=1500

#################################
# receiver-threads	Default number of receiver threads to start
#
# receiver-threads=1

#################################
# recursive-cache-ttl	Seconds to store packets for recursive queries in the PacketCache
#
recursive-cache-ttl=10

#################################
# recursor	If recursion is desired, IP address of a recursing nameserver
#
#recursor=8.8.8.8

#################################
# retrieval-threads	Number of AXFR-retrieval threads for slave operation
#
# retrieval-threads=2

#################################
# reuseport	Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket
#
# reuseport=no

#################################
# security-poll-suffix	Domain name from which to query security update notifications
#
# security-poll-suffix=secpoll.powerdns.com.

#################################
# server-id	Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom
#
# server-id=

#################################
# setgid	If set, change group id to this gid for more security
#
setgid=pdns

#################################
# setuid	If set, change user id to this uid for more security
#
setuid=pdns

#################################
# signing-threads	Default number of signer threads to start
#
# signing-threads=3

#################################
# slave	Act as a slave
#
slave=no

#################################
# slave-cycle-interval	Schedule slave freshness checks once every .. seconds
#
# slave-cycle-interval=60

#################################
# slave-renotify	If we should send out notifications for slaved updates
#
# slave-renotify=no

#################################
# soa-expire-default	Default SOA expire
#
# soa-expire-default=604800

#################################
# soa-minimum-ttl	Default SOA minimum ttl
#
# soa-minimum-ttl=3600

#################################
# soa-refresh-default	Default SOA refresh
#
# soa-refresh-default=10800

#################################
# soa-retry-default	Default SOA retry
#
# soa-retry-default=3600

#################################
# socket-dir	Where the controlsocket will live, /var/run when unset and not chrooted
#
socket-dir=/var/run

#################################
# tcp-control-address	If set, PowerDNS can be controlled over TCP on this address
#
# tcp-control-address=

#################################
# tcp-control-port	If set, PowerDNS can be controlled over TCP on this address
#
# tcp-control-port=53000

#################################
# tcp-control-range	If set, remote control of PowerDNS is possible over these networks only
#
# tcp-control-range=127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10

#################################
# tcp-control-secret	If set, PowerDNS can be controlled over TCP after passing this secret
#
# tcp-control-secret=

#################################
# traceback-handler	Enable the traceback handler (Linux only)
#
# traceback-handler=yes

#################################
# trusted-notification-proxy	IP address of incoming notification proxy
#
# trusted-notification-proxy=

#################################
# udp-truncation-threshold	Maximum UDP response size before we truncate
#
# udp-truncation-threshold=1680

#################################
# version-string	PowerDNS version in packets - full, anonymous, powerdns or custom
#
# version-string=full

#################################
# webserver	Start a webserver for monitoring
#
# webserver=no

#################################
# webserver-address	IP Address of webserver to listen on
#
# webserver-address=127.0.0.1

#################################
# webserver-allow-from	Webserver access is only allowed from these subnets
#
# webserver-allow-from=0.0.0.0/0,::/0

#################################
# webserver-password	Password required for accessing the webserver
#
# webserver-password=

#################################
# webserver-port	Port of webserver to listen on
#
# webserver-port=8081

#################################
# webserver-print-arguments	If the webserver should print arguments
#
# webserver-print-arguments=no

#################################
# write-pid	Write a PID file
#
# write-pid=yes

#################################
# xfr-max-received-mbytes	Maximum number of megabytes received from an incoming XFR
#
# xfr-max-received-mbytes=100


